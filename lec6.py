#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Nov 27 09:10:25 2019

@author: owner
"""

import numpy as np 
import matplotlib.pyplot as plt
from random import random

#Q1 =============================================================================
# a= np.zeros( (1,10) )
# print (a)
# 
# b= np.ones( (1,10), dtype=np.int16 )*1
# print (b)
# 
# c= np.ones( (1,10), dtype=np.int16 )*5
# print (c)
# =============================================================================

# Q2=============================================================================
# a = np.arange(30,70)
# print(a)
# =============================================================================


# Q3=============================================================================
# a = np.arange(30,70,2)
# print(a)
# 
# =============================================================================

#Q4=============================================================================
# j = np.arange(9).reshape(3,3)
# print(j)

# Q4=============================================================================
# i=np.identity(3,dtype= int)
# print(i)
# =============================================================================
#Q5 =============================================================================
# =============================================================================
# for _ in range(0,1):
# 	value = random()
# print(value)
# 
# 	value = random(0,1)
# print(value)
# 
# random_matrix_array = np.random.rand(3)
# print(random_matrix_array)
# =============================================================================
#Q6 =============================================================================
# j = np.arange(12).reshape(3,4)
# print(j)
# 
# for x in np.nditer(j):
#     print('we are iterate:',x)
# 
# =============================================================================
# Q7=============================================================================
# a = np.arange(0,21)
# a[(a>=9)&(a<=15)]*=-1
# print(a)
# =============================================================================

# Q8=============================================================================
# x=[1,8,3,5]
# y=np.random.randint(0,11,4)
# print(x*y)
# =============================================================================

# Q9=============================================================================
# j = np.arange(12).reshape(3,4)
# print(j)
# print ("j row: ", len(j))
# print ("col: ", len(j[0]))
# print ("j size: ", j.size)
# print ("j shape: ",j.shape)
# =============================================================================

#Q10 =============================================================================
# j = np.arange(27).reshape(3,3,3) 
# print(j)
# # 
# =============================================================================
# Q11=============================================================================
# a=np.array([9,-1,2,5])
# b=np.array([1,-6,0,10])
# c=np.array([[1,8,2,5],[3,1,7,9]])
# print("a-b: ",a-b)
# print("a*b: ",a*b)
# print("a.dot(b):",a.dot(b))
# print("a*2: ",a*2)
# print("np.sin(a): ",np.sin(a))
# print("a<3: ",a<3)
# print("a.sum():",a.sum())
# print("a.sum(axis=0): ",a.sum(axis=0))
# print("c.sum():",c.sum())
# print("c.sum(axis=0): ",c.sum(axis=0))
# print("a.min(): ",a.min())
# print("a.max(): ",a.max())
# print("a.mean(): ",a.mean())
# print("a average() ",np.average(a))
# print("a median(): ",np.median(a))
# print("a std(): ",np.std(a))
# print("a var(): ",np.var(a))
# print("c.cumsum(): ",c.cumsum())
# print("a[1:2] ",a [1:2])
# print("a[2:]: ",a [2:])
# print("c[-1]: ",c[-1] )
# =============================================================================
import matplotlib.pyplot as plt
# Q12=============================================================================
# plt.style.use('ggplot')
# x=range(1,50)
# y=[value*3 for value in x]
# plt.plot(x,y)
# plt.ylabel('Y Numbers')
# plt.xlabel('X Numbers')
# plt.show()
# =============================================================================
# 
# =============================================================================
# plt.style.use('ggplot')
# x=[10,20,30]
# y=[20,40,10]
# x2=[10,20,30]
# y2=[20,10,30]
# plt.plot(x,x);plt.plot(x,x)
# plt.ylabel('Y Numbers')
# plt.xlabel('X Numbers')
# plt.show()
# =============================================================================
#Q13 =============================================================================
# x1 = [10,20,30]
# y1 = [20,40,10]
# plt.plot(x1, y1, label = "line 1")
# x2 = [10,20,30]
# y2 = [40,10,30]
# plt.plot(x2, y2, label = "line 2")
# plt.xlabel('x - axis')
# plt.ylabel('y - axis')
# plt.title('Two or more lines on same plot with suitable legends ')
# plt.legend()
# plt.show()
# =============================================================================


#Q14 =============================================================================
# t = np.arange(0., 5., 0.2)
# 
# plt.plot(t, t, 'g--', t, t**2, 'bs', t, t**3, 'r^')
# plt.show()
# 
# =============================================================================

#Q15 =============================================================================
# x = ['Python', 'Java', 'PHP', 'JavaScript', 'C#', 'C++']
# popularity = [22.2, 17.6, 8.8, 8, 7.7, 6.7]
# x_pos = [i for i, _ in enumerate(x)]
# 
# plt.bar(x_pos, popularity, color=['red', 'black', 'green', 'blue', 'yellow', 'cyan'])
# 
# plt.xlabel("Languages")
# plt.ylabel("Popularity")
# plt.title("PopularitY of Programming Language")
# plt.xticks(x_pos, x)
# 
# plt.show()
# =============================================================================
#












# =============================================================================
# b = np.array([1, 4, 7, 5])
# print(b)
# 
# 
# c = np.array([ [1, 4, 7, 5],[2, 8, 3, 2]])
# print(c)
# =============================================================================
# =============================================================================
# a = np.arange(12).reshape(3, 4)
# print(a)
# print ("a size: ", a.size)
# print ("a shape: ", a.shape)
# print ("a ndim: ", a.ndim)
# print ("a dtype.name: ", a.dtype.name)
# print ("a itemsize: ", a.itemsize)
# =============================================================================
# =============================================================================
# d = np.array([(1.5,2,3), (4,5,6)])
# print (d)
# print ("a ndim: ", d.ndim)
# print ("d shape: ", d.shape)
# print ("a itemsize: ", d.itemsize)
# print ("a dtype.name: ", d.dtype.name)
# =============================================================================
# =============================================================================
# f = np.array( [ [1,2], [3,4] ], dtype=complex )
# print(f)
# # print ("d shape: ", d.shape)
# =============================================================================
# print ("a itemsize: ", d.itemsize)
# print ("a dtype.name: ", d.dtype.name)
# =============================================================================
# g= np.ones( (2,4) , dtype=np.int16 )*6
# print(g)
# =============================================================================

# =============================================================================
# j = np.arange(24).reshape(2,3,4)
# print(j)
# print ("j shape: ", j.shape)
# print ('j ndim: ', j.ndim)
# =============================================================================
# =============================================================================
# a = np.array([1, -1, 7, 3])
# print("c[-1] :  ",a[-1])
# =============================================================================
 
# =============================================================================
# a = np.array([[3,7,2,1,8,7,19,15],[10,2,7,4,5,5,9,1]])
# print('a array:')
# print (a)
# print('\n quicksort:') 
# # =============================================================================
# # 
# print (np.sort(a,kind='quicksort') ) 
# =============================================================================
# print('\n mergesort')
# print (np.sort(a,kind='mergesort') ) 
# print('\n heapsort:')
# print (np.sort(a,kind='heapsort') ) 
# print('\n sort as flattened arra:')
# print (np.sort(a,axis=None)
# =============================================================================

# =============================================================================

# =============================================================================
# f=[-1, 2, 8, 4,15,-6]
#  
# plt.plot(f)
# plt.show()
# =============================================================================
# 
# =============================================================================

# =============================================================================
# plt.style.use('ggplot')
# x=[1, 2, 3, 4,5,6]
# y=[1, 4, 9, 16,0,30]
# plt.plot(x,y)
# plt.ylabel('Y Numbers')
# plt.xlabel('X Numbers')
# plt.show()
# 
# =============================================================================
# =============================================================================
# def p1(x): 
#     return x**4 -4*x**2 + 3*x 
# def p2(x): 
#     return np.sin(10*x) * 10 
# X = np.linspace(-3, 3, 200)
# 
# 
# plt.plot( X,p1(X), X,p2(X))
# plt.show()
# 
# =============================================================================

# =============================================================================
# x=np.arange(0.,10,0.1)
# a=np.cos(x)
# b=np.sin(x)
# c=np.exp(x/10)
# d=np.exp(-x/10)
# 
# plt.plot(x,a,'b-',label='cosine')
# plt.plot(x,b,'r--',label='sine')
# plt.plot(x,c,'g-',label='exp(+x)')
# plt.plot(x,d,'y-',linewidth=5,label='exp(-x)')
# plt.legend(loc='upperleft')
# plt.xlabel('xaxis')
# plt.ylabel('yaxis')
# plt.show()
# =============================================================================


# =============================================================================
# n = 1024
# X = np.random.normal(0,1,n)
# Y = np.random.normal(0,1,n)
# plt.scatter(X,Y)
# plt.show()
# =============================================================================




# =============================================================================
# t = np.arange(0.0, 5.0, 0.01)
# s = np.cos(2*np.pi*t)
# plt.plot(t, s, lw=2)
# plt.annotate('Max Value', xy=(2, 1), xytext=(3, 1.5),arrowprops=dict(facecolor='black', shrink=0.05),)
# plt.ylim(-2,2)
# plt.show()
# =============================================================================


# =============================================================================
# from mpl_toolkits.mplot3d import Axes3D
# fig = plt.figure()
# ax = Axes3D(fig)
# X = np.arange(-4, 4, 0.25)
# Y = np.arange(-4, 4, 0.25)# meshgrid: Return coordinate matrices from coordinate vectors.
# X, Y = np.meshgrid(X, Y) 
# R = np.sqrt(X**2 + Y**2)
# Z = np.sin(R)
# ax.plot_surface(X, Y, Z, cmap='hot')
# plt.show()
# 
# =============================================================================








